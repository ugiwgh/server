# ==== Purpose ====
#
# Test verifies replication failover scenario.
#
# ==== Implementation ====
#
# Steps:
#    0 - Have two servers with id's 1 and 2. Enable semi-sync based
#        replication. Have semi sync master wait point as 'after_sync'.
#    1 - Create a table and insert a row. While inserting second row simulate
#        a server crash at once the transaction is written to binlog, flushed
#        and synced but the binlog position is not updated.
#    2 - Restart the server using --tc-heuristic-recover=BINLOG_TRUNCATE
#    3 - Post restart switch the crashed master to slave. Execute CHANGE MASTER
#        TO command to connect to server id 2.
#    4 - Slave should be able to connect to master.
#    5 - Execute some DML on new master with server id 2. Ensure that it gets
#        replicated to server id 1.
#    6 - Verify the "gtid_current_pos" for correctness.
#    7 - Clean up
#
# ==== References ====
#
# MDEV-21117: --tc-heuristic-recover=rollback is not replication safe


--source include/have_semisync.inc
--source include/have_innodb.inc
--source include/have_log_bin.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc
--let $rpl_topology=1->2
--source include/rpl_init.inc

--connection server_2
--source include/stop_slave.inc
set global rpl_semi_sync_slave_enabled = 1;
CHANGE MASTER TO master_use_gtid= current_pos;
--source include/start_slave.inc


--connection server_1
ALTER TABLE mysql.gtid_slave_pos ENGINE=InnoDB;
set global rpl_semi_sync_master_enabled = 1;
set global rpl_semi_sync_master_wait_point=AFTER_SYNC;
SET @old_max_binlog_size= @@global.max_binlog_size;
SET GLOBAL max_binlog_size= 4096;

call mtr.add_suppression("Can't init tc log");
call mtr.add_suppression("Aborting");

CREATE TABLE t1 (a INT PRIMARY KEY, b MEDIUMTEXT) ENGINE=Innodb;
INSERT INTO t1 VALUES (1, 'dummy1');
--save_master_pos

--connection server_2
--sync_with_master

--connection server_1
connect(master1,localhost,root,,);
connect(master2,localhost,root,,);

--connection master1
# Hold insert after write to binlog and before "run_commit_ordered" in engine
SET DEBUG_SYNC= "commit_before_update_end_pos SIGNAL con1_ready WAIT_FOR con1_go";
send INSERT INTO t1 VALUES (2, REPEAT("x", 4100));

--connection master2
SET DEBUG_SYNC= "now WAIT_FOR con1_ready";
--write_file $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
wait
EOF

--source include/kill_mysqld.inc
--source include/wait_until_disconnected.inc

--connection server_2
--error 2003
--source include/stop_slave.inc
SELECT @@GLOBAL.gtid_current_pos;

--connection server_1
#
# Server restart
#
--append_file $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
restart: --tc-heuristic-recover=BINLOG_TRUNCATE
EOF
--source include/wait_until_disconnected.inc

--append_file $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
restart:
EOF

connection default;
--enable_reconnect
--source include/wait_until_connected_again.inc

--connection server_1
--enable_reconnect
--source include/wait_until_connected_again.inc

# Check error log for correct messages.
let $log_error_= `SELECT @@GLOBAL.log_error`;
if(!$log_error_)
{
    # MySQL Server on windows is started with --console and thus
    # does not know the location of its .err log, use default location
    let $log_error_ = $MYSQLTEST_VARDIR/log/mysqld.1.err;
}
--let SEARCH_FILE=$log_error_
--let SEARCH_RANGE=-50000
--let SEARCH_PATTERN=tc-heuristic-recover: Truncated binlog File: \.\/master\-bin\.000001 of Size:[0-9]*, to Position *
--source include/search_pattern_in_file.inc

--connection server_2
set global rpl_semi_sync_master_enabled = 1;
set global rpl_semi_sync_master_wait_point=AFTER_SYNC;

--connection server_1
--replace_result $SERVER_MYPORT_2 SERVER_MYPORT_2
eval CHANGE MASTER TO master_host='127.0.0.1', master_port=$SERVER_MYPORT_2, master_user='root', master_use_gtid=CURRENT_POS;
set global rpl_semi_sync_slave_enabled = 1;
--source include/start_slave.inc

--connection server_2
INSERT INTO t1 VALUES (3, 'dummy3');
--save_master_pos

--connection server_1
--sync_with_master
SELECT COUNT(*) FROM t1;
SHOW VARIABLES LIKE 'gtid_current_pos';

--connection server_2
SHOW VARIABLES LIKE 'gtid_current_pos';
DROP TABLE t1;
set global rpl_semi_sync_master_enabled = 0;
set global rpl_semi_sync_slave_enabled = 0;
set global rpl_semi_sync_master_wait_point=default;
--save_master_pos

--connection server_1
--sync_with_master
set global rpl_semi_sync_master_enabled = 0;
set global rpl_semi_sync_slave_enabled = 0;
set global rpl_semi_sync_master_wait_point=default;
--source include/stop_slave.inc
RESET MASTER;
RESET SLAVE;

--connection server_2
RESET MASTER;
RESET SLAVE;
--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1
eval CHANGE MASTER TO master_host='127.0.0.1', master_port=$SERVER_MYPORT_1, master_user='root', master_use_gtid=no;
--source include/start_slave.inc

--source include/rpl_end.inc
